<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="/homepage.css">
</head>
<body>

    <div class="app" style="width: 100vw; height: 100vh;">
        <div class="row">


        <div class="home-button red">
            <img src="food-strawberry.png" alt="">
            <div class="text inverso">
                <span>H</span>
                <span>O</span>
                <span>M</span>
                <span>E</span>
                <span>P</span>
                <span>A</span>
                <span>G</span>
                <span>E</span>
            </div>
            <div class="text reverso">
                <span>H</span>
                <span>O</span>
                <span>M</span>
                <span>E</span>
                <span>P</span>
                <span>A</span>
                <span>G</span>
                <span>E</span>
            </div>
        </div>

        <div class="home-button yellow">
            <img src="food-strawberry.png" alt="">
            <div class="text inverso">
                <span>H</span>
                <span>O</span>
                <span>M</span>
                <span>E</span>
                <span>P</span>
                <span>A</span>
                <span>G</span>
                <span>E</span>
            </div>
            <div class="text reverso">
                <span>H</span>
                <span>O</span>
                <span>M</span>
                <span>E</span>
                <span>P</span>
                <span>A</span>
                <span>G</span>
                <span>E</span>
            </div>
        </div>

        <div class="home-button blue">
            <img src="food-strawberry.png" alt="">
            <div class="text inverso">
                <span>H</span>
                <span>O</span>
                <span>M</span>
                <span>E</span>
                <span>P</span>
                <span>A</span>
                <span>G</span>
                <span>E</span>
            </div>
            <div class="text reverso">
                <span>H</span>
                <span>O</span>
                <span>M</span>
                <span>E</span>
                <span>P</span>
                <span>A</span>
                <span>G</span>
                <span>E</span>
            </div>
        </div>

        </div>
    </div>
    <canvas style="width: 100%; height: 100%; position: fixed; top: 0; left: 0;" id="myCanvas"></canvas>
    <script defer>
        const canvas = document.getElementById("myCanvas");
        const ctx = canvas.getContext("2d");

        let mousePos = new Uint16Array(32);

        const renderLines = () => {
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            ctx.beginPath(); // I still don't understand what beginPath and closePath do
            ctx.moveTo(mousePos[0], mousePos[1]);
            // ctx.lineTo(...point2);
            for (let i = 2; i < 32; i+=2) {
                ctx.lineTo(mousePos[i], mousePos[i + 1]);
            }
            // ctx.closePath();
            ctx.stroke();
            ctx.closePath();

            const y1 = mousePos[29];
            const x1 = mousePos[28];
            const y2 = mousePos[31];
            const x2 = mousePos[30];
            const xDelta = x2 - x1;
            const yDelta = y2 - y1;
            const yIntercept = y1 - ((yDelta/xDelta)*x1);
            const A = yDelta;
            const B = -1*(xDelta);
            const C = (xDelta)*yIntercept;

            // /**
            //  * @param {number} x 
            //  * @param {number} y 
            //  */
            // const difference = (x, y) => {
            //     return (A*x) + (B*y) + C;
            // }

            /**
             * @param {DOMRect} target 
             * @returns {boolean}
             */
            const slicedTarget = (target) => {
                const topLeft = (A*target.left) + (B*target.top) + C;
                const botRight = (A*target.right) + (B*target.bottom) + C;
                return (topLeft > 0 && botRight < 0) || (botRight > 0 && topLeft < 0)
            }

            // const targetRect = document.querySelector("body > div > div > img").getBoundingClientRect();

            // const topLeft = difference(targetRect.left, targetRect.top);
            // const botRight = difference(targetRect.right, targetRect.bottom);
            // const topRight = difference(targetRect.right, targetRect.top);
            // const botLeftRight = difference(targetRect.left, targetRect.bottom);

            if (slicedTarget(document.querySelector("body > div > div > img").getBoundingClientRect())) console.log("Yes!");
        }

        // renderLines()

        const resizer = async () => {
            canvas.width = window.innerWidth;
            canvas.height = window.innerHeight;   
            renderLines();
        }

        window.addEventListener("resize", resizer);
        resizer();

        window.addEventListener("click", (event) => {
            if (event.clientX === mousePos[30] && event.clientY === mousePos[31]) return;

            const newMousePos = new Uint16Array([...mousePos.slice(2), event.clientX, event.clientY]);
            mousePos = newMousePos;

            renderLines();
        });

        // let positionCache = 0;
        // setInterval(() => {
        //     const newMousePos = new Uint16Array([])

        //     renderLines();
        // }, 500)

        setInterval(() => {
            const targetRect = document.querySelector("body > div > div > img").getBoundingClientRect();
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            ctx.beginPath();
            ctx.arc(targetRect.left, targetRect.top, 5, 0, 2 * Math.PI);
            ctx.arc(targetRect.right, targetRect.bottom, 5, 0, 2 * Math.PI);
            ctx.arc(targetRect.left, targetRect.bottom, 5, 0, 2 * Math.PI);
            ctx.arc(targetRect.right, targetRect.top, 5, 0, 2 * Math.PI);
            ctx.fill("evenodd");
            ctx.closePath();
        }, 100);
    </script>
</body>
</html>
